# Stage 1: Import Libraries

# this definition exposes all python module imports that should be available in all subsequent commands
import json
import numpy as np
import pandas as pd
import os
import datetime
import tensorflow as tf
from tensorflow import keras
# ...
# global constants
MODEL_DIRECTORY = "/srv/app/model/data/"

# THIS CELL IS NOT EXPORTED - free notebook cell for testing or development purposes
print("numpy version: " + np.__version__)
print("pandas version: " + pd.__version__)
print("tensorflow version: " + tf.__version__)
print("keras version: " + keras.__version__)

# Module 3
# Stage 2-1: Get Data from Splunk (Pull)
search = SplunkSearch.SplunkSearch(search='| inputlookup diabetes.csv')

# Stage 2-2 : Get Data from Splunk (Push)
| inputlookup diabetes.csv
| fit MLTKContainer algo=my_classification response mode=stage from BMI age blood_pressure diabetes_pedigree glucose_concentration number_pregnant serum_insulin skin_thickness 
into app:diabetes_classification_model

| inputlookup diabetes.csv
| fit MLTKContainer algo=my_classification response from BMI age blood_pressure diabetes_pedigree glucose_concentration number_pregnant serum_insulin skin_thickness 
into app:diabetes_classification_model 

# THIS CELL IS NOT EXPORTED - free notebook cell for testing or development purposes
df, param = stage("diabetes_classification_model")


# Module 3: Init function
# initialize your model
# available inputs: data and parameters
# returns the model object which will be used as a reference to call fit, apply and summary subsequently
def init(df,param):
    X = df[param['feature_variables']]
    print("FIT build model with input shape " + str(X.shape))
    input_shape = int(X.shape[1])
    model_structure = '2-2'
    if 'options' in param:
        if 'params' in param['options']:
            if 'structure' in param['options']['params']:
                model_structure = str(param['options']['params']['structure']).lstrip("\"").rstrip("\"")
    hidden_factors = np.floor(np.array(model_structure.split("-"), dtype="float") * X.shape[1])
    model = keras.Sequential()
    model.add(keras.layers.Dense(input_shape, input_dim=input_shape, activation=tf.nn.relu))
    for hidden in hidden_factors:
        model.add(keras.layers.Dense(int(hidden), activation=tf.nn.relu))
    model.add(keras.layers.Dense(1, activation=tf.nn.sigmoid))
    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy']) 
    return model


# Module 4: Fit the Model
def fit(model,df,param):
    returns = {} # 반환값을 결정하기 위한 Dictionary 초기화
    X = df[param['feature_variables’]] # df의 param의 feature_variable에 해당하는 열을 x에 저장해 학습 데이터의 특징 변수로 지정
    Y = df[param['target_variables’]] # df의 param에서 target_variable에 해당하는 열을 Y에 저장해 학습 데이터의 타겟 변수로 지정
    model_epochs = 100
    model_batch_size = None
    if 'options' in param:
        if 'params' in param['options']:
            if 'epochs' in param['options']['params']:
                model_epochs = int(param['options']['params']['epochs’]) # param 내 epoch을 할당
            if 'batch_size' in param['options']['params']:
                model_batch_size = int(param['options']['params']['batch_size’]) # param 내 batch_size를 할당
    # connect model training to tensorboard
    log_dir="/srv/notebooks/logs/fit/" + datetime.datetime.now().strftime("%Y%m%d-%H%M%S")
    tensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=log_dir, histogram_freq=1)
    # run the training
    returns['fit_history'] = model.fit(x=X,
                                       y=Y, 
                                       verbose=2, 
                                       epochs=model_epochs, 
                                       batch_size=model_batch_size, 
                                       #validation_data=(X, Y),
                                       callbacks=[tensorboard_callback])
    # memorize parameters
    returns['model_epochs'] = model_epochs
    returns['model_batch_size'] = model_batch_size
    returns['model_loss_acc'] = model.evaluate(x = X, y = Y)
    return returns


# Module 5: Apply the Model
# apply your model
# returns the calculated results
def apply(model,df,param):
    X = df[param['feature_variables']]
    y_hat = model.predict(x = X, verbose=1)
    return y_hat



